import socket
import struct
import textwrap


def mac_addr(mac_bytes):
    return ':'.join(f'{b:02x}' for b in mac_bytes)


def ipv4(addr):
    return '.'.join(map(str, addr))


def ethernet_frame(data):
    dest, src, prototype = struct.unpack('! 6s 6s H', data[:14])
    return mac_addr(dest), mac_addr(src), socket.htons(prototype), data[14:]


def ipv4_packet(data):
    version_header_length = data[0]
    version = version_header_length >> 4
    header_length = (version_header_length & 15) * 4
    ttl, proto, src, target = struct.unpack('! 8x B B 2x 4s 4s', data[:20])
    return version, header_length, ttl, proto, ipv4(src), ipv4(target), data[header_length:]


def icmp_packet(data):
    icmp_type, code, checksum = struct.unpack('! B B H', data[:4])
    return icmp_type, code, checksum, data[4:]

def tcp_segment(data):
    (src_port, dest_port, sequence, acknowledgment, offset_reserved_flags) = struct.unpack('! H H L L H', data[:14])
    offset = (offset_reserved_flags >> 12) * 4
    return src_port, dest_port, sequence, acknowledgment, data[offset:]


def udp_segment(data):
    src_port, dest_port, size = struct.unpack('! H H 2x H', data[:8])
    return src_port, dest_port, size, data[8:]


def format_multi_line(prefix, string, size=80):
    size -= len(prefix)
    if isinstance(string, bytes):
        string = ''.join(r'\x{:02x}'.format(b) for b in string)
    return '\n'.join([prefix + line for line in textwrap.wrap(string, size)])


def main():
    
    conn = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(3))
    print("[*] Sniffer started... Press Ctrl+C to stop.\n")

    while True:
        raw_data, addr = conn.recvfrom(65536)
        dest_mac, src_mac, eth_proto, data = ethernet_frame(raw_data)
        print('\nEthernet Frame:')
        print(f'  Destination: {dest_mac}, Source: {src_mac}, Protocol: {eth_proto}')

        
        if eth_proto == 8:
            version, header_length, ttl, proto, src, target, data = ipv4_packet(data)
            print('  IPv4 Packet:')
            print(f'    Version: {version}, Header Length: {header_length}, TTL: {ttl}')
            print(f'    Protocol: {proto}, Source: {src}, Target: {target}')

            
            if proto == 1:
                icmp_type, code, checksum, data = icmp_packet(data)
                print('    ICMP Packet:')
                print(f'      Type: {icmp_type}, Code: {code}, Checksum: {checksum}')
                print(format_multi_line('      Data: ', data))

            
            elif proto == 6:
                src_port, dest_port, sequence, ack, data = tcp_segment(data)
                print('    TCP Segment:')
                print(f'      Source Port: {src_port}, Dest Port: {dest_port}')
                print(f'      Sequence: {sequence}, Acknowledgment: {ack}')
                print(format_multi_line('      Data: ', data))

            
            elif proto == 17:
                src_port, dest_port, size, data = udp_segment(data)
                print('    UDP Segment:')
                print(f'      Source Port: {src_port}, Dest Port: {dest_port}, Length: {size}')
                print(format_multi_line('      Data: ', data))
            else:
                print('    Other Protocol:')
                print(format_multi_line('      Data: ', data))

        else:
            print('  Non-IPv4 Ethernet Frame')

if __name__ == "__main__":
    main()

